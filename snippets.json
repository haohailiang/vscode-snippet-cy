{
    "cy-canvas-animate": {
        "prefix": "cy-canvas-animate",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.animate",
            "// https://js.cytoscape.org/#style/transition-animation",
            "cy.animate({",
            "    zoom: {",
            "        level: 1,",
            "        position: { x: pointX, y: pointY },",
            "        renderedPosition: { x: canvasX, y: canvasY },",
            "    },",
            "    // zoom: 1,",
            "    pan: { x: canvasX, y: canvasY }, // y, 正数: 向下拖动画布",
            "    panBy: { x: relativeCanvasX, y: relativeCanvasY },",
            "    fit: {",
            "        // eles: cy.$('#a'),",
            "        // eles: cy.nodes(),",
            "        eles: cy.collection().union(cy.$('#a')).union(cy.$('#b')),",
            "        // eles: cy.collection().union(cy.collection().union(cy.$('#a'))),",
            "        padding: canvasPadding,",
            "    },",
            "    center: {",
            "        eles: cy.$('#a'),",
            "    }",
            "}, {",
            "    duration: 10000,",
            "    easing: 'ease',",
            "    complete: function () {",
            "    },",
            "    step: function () {",
            "        // console.log('step: ', arguments)",
            "        // 相当于tick函数",
            "    },",
            "})",
            "",
            "cy.pan() // { x: canvasX, y: canvasY }",
            "cy.zoom()"
        ],
        "description": "cy canvas整体的动画"
    },
    "cy-canvas-animation": {
        "prefix": "cy-canvas-animation",
        "scope": "javascript,javascriptreact",
        "body": [
            "const cyAnimation = cy.animation({",
            "    zoom: {",
            "        level: 1,",
            "        position: { x: pointX, y: pointY },",
            "        renderedPosition: { x: canvasX, y: canvasY },",
            "    },",
            "    // zoom: 1,",
            "    pan: { x: canvasX, y: canvasY }, // y, 正数: 向下拖动画布",
            "    panBy: { x: relativeCanvasX, y: relativeCanvasY },",
            "    fit: {",
            "        // eles: cy.$('#a'),",
            "        // eles: cy.nodes(),",
            "        eles: cy.collection().union(cy.$('#a')).union(cy.$('#b')),",
            "        // eles: cy.collection().union(cy.collection().union(cy.$('#a'))),",
            "        padding: canvasPadding,",
            "    },",
            "    center: {",
            "        eles: cy.$('#a'),",
            "    }",
            "}, {",
            "    duration: 10000,",
            "    easing: 'ease',",
            "    complete: function () {",
            "    },",
            "    step: function () {",
            "        // console.log('step: ', arguments)",
            "        // 相当于tick函数",
            "    },",
            "})",
            "",
            "cyAnimation.play();"
        ],
        "description": "cy canvas整体的动画, 可以赋值给一个变量"
    },
    "cy-canvas-delay": {
        "prefix": "cy-canvas-delay",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.delay",
            "cy",
            "    .animate({",
            "        fit: { eles: '#a' }",
            "    }, {",
            "        duration: 5000",
            "    })",
            "    .delay(5000)",
            "    .animate({",
            "        fit: { eles: '#b' }",
            "    }, {",
            "        duration: 5000",
            "    });"
        ],
        "description": "延迟执行动画"
    },
    "cy-canvas-visible": {
        "prefix": "cy-canvas-visible",
        "scope": "javascript,javascriptreact",
        "body": [
            "/**",
            " * 获取视图的可见范围 - point坐标系[非canvas坐标系]",
            " * @param {*} x1 视图左上角坐标",
            " * @param {*} y1 ",
            " * @param {*} x2 视图右下角坐标",
            " * @param {*} y2 ",
            " * @param {*} w 视图宽",
            " * @param {*} h 视图高",
            " */",
            "const {",
            "    x1: startPointX,",
            "    y1: startPointY,",
            "    x2: endPointX,",
            "    y2: endPointY,",
            "    w: pointWidth,",
            "    h: pointHeight,",
            "} = cy.extent()"
        ],
        "description": "获取视图的可见范围 - point坐标系[非canvas坐标系]"
    },
    "cy-coord-getCanvasByPoint": {
        "prefix": "cy-coord-getCanvasByPoint",
        "scope": "javascript,javascriptreact",
        "body": [
            "// Convert a model position to a rendered position",
            "// function toRenderedPosition(pos) {",
            "/**",
            " * 将视口坐标转换为Canvas画布坐标[ renderedPosition - x ][ renderedPosition - y ]",
            " * @param pointX[position - x] 视口x坐标",
            " * @param pointY[position - y] 视口y坐标",
            " * @param cyInstance cy实例",
            " * @returns Canvas 画布坐标",
            " */",
            "function getCanvasByPoint(pointX, pointY, cyInstance) {",
            "    const pan = cyInstance.pan();",
            "    const zoom = cyInstance.zoom();",
            "    return {",
            "        x: pointX * zoom + pan.x,",
            "        y: pointY * zoom + pan.y,",
            "    };",
            "};",
        ],
        "description": "pointX/pointY 转 canvasX/canvasY"
    },
    "cy-coord-getClientByPoint": {
        "prefix": "cy-coord-getClientByPoint",
        "scope": "javascript,javascriptreact",
        "body": [
            "/**",
            " * 将视口坐标转换为屏幕/页面坐标[ clientX - x ][ clientY - y ]",
            " * @param pointX[position - x] 视口x坐标",
            " * @param pointY[position - y] 视口y坐标",
            " * @param cyInstance cy实例",
            " * @param cyId cyId",
            " * @returns 屏幕/页面坐标",
            " */",
            "function getClientByPoint(pointX, pointY, cyInstance, cyId) {",
            "    const { left: cyClientLeft, top: cyClientTop } = document.getElementById(cyId).getBoundingClientRect()",
            "    const { x: canvasX, y: canvasY } = getCanvasByPoint(pointX, pointY, cyInstance)",
            "",
            "    return {",
            "        x: cyClientLeft + canvasX,",
            "        y: cyClientTop + canvasY,",
            "    }",
            "}"
        ],
        "description": "pointX/pointY 转 clientX/clientY"
    },
    "cy-coord-getPointByCanvas": {
        "prefix": "cy-coord-getPointByCanvas",
        "scope": "javascript,javascriptreact",
        "body": [
            "// Convert a rendered position to a model position",
            "// function toModelPosition(pos) {",
            "/**",
            " * 将Canvas画布坐标转换为视口坐标[position - x][position - y]",
            " * @param canvasX 画布x坐标[ renderedPosition - x ]",
            " * @param canvasY 画布y坐标[ renderedPosition - y ]",
            " * @param cyInstance cy实例",
            " * @returns 视口坐标",
            " */",
            "function getPointByCanvas(canvasX, canvasY, cyInstance) {",
            "    const pan = cyInstance.pan();",
            "    const zoom = cyInstance.zoom();",
            "    return {",
            "        x: (canvasX - pan.x) / zoom,",
            "        y: (canvasY - pan.y) / zoom,",
            "    };",
            "}"
        ],
        "description": "canvasX/canvasY 转 clientX/clientY"
    },
    "cy-coord-getPointByClient": {
        "prefix": "cy-coord-getPointByClient",
        "scope": "javascript,javascriptreact",
        "body": [
            "/**",
            " * 将屏幕/页面坐标转换为视口坐标[position - x][position - y]",
            " * @param clientX 屏幕x坐标",
            " * @param clientY 屏幕y坐标",
            " * @param cyInstance cy实例",
            " * @param cyId cyId",
            " * @returns 视口坐标",
            " */",
            "function getPointByClient(clientX, clientY, cyInstance, cyId) {",
            "    const { left: cyClientLeft, top: cyClientTop } = document.getElementById(cyId).getBoundingClientRect()",
            "    const canvasX = clientX - cyClientLeft",
            "    const canvasY = clientY - cyClientTop",
            "",
            "    return getPointByCanvas(canvasX, canvasY, cyInstance)",
            "}"
        ],
        "description": "clientX/clientY 转 canvasX/canvasY"
    },
    "cy-coord-point-canvas": {
        "prefix": "cy-coord-point-canvas",
        "scope": "javascript,javascriptreact",
        "body": [
            "node.renderedPosition()",
            "node.position()",
            "",
            "// https://js.cytoscape.org/#node.renderedPosition",
            "node.renderedPosition()"
        ],
        "description": "原生获得point canvas的坐标"
    },
    "cy-destroy": {
        "prefix": "cy-destroy",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.destroy",
            "cy.destroy()"
        ],
        "description": "销毁画布"
    },
    "cy-edge-getSource": {
        "prefix": "cy-edge-getSource",
        "scope": "javascript,javascriptreact",
        "body": [
            "https://js.cytoscape.org/#edge.source",
            "cy.on('mouseover', 'node', function(evt){",
            "    var ele = evt.target;",
            "",
            "    cy.edges().forEach(function(edge) {",
            "        if (edge.source() === ele) {",
            "            edge.addClass( [ 'click' ] )",
            "        }",
            "        ",
            "        if (edge.target() === ele) {",
            "            edge.addClass( [ 'click' ] )",
            "        }",
            "    })",
            "});",
            "",
            "cy.nodes().on('mouseover', function(evt) {",
            "    // ",
            "})"
        ],
        "description": "获取一个节点的起始节点和终止节点"
    },
    "cy-edge-type-common": {
        "prefix": "cy-edge-type-common",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#style/node-body",
            "// https://js.cytoscape.org/#style/edge-line",
            "var cy = cytoscape({",
            "    elements: [",
            "        {",
            "            data: { id: 'ab', source: 'a', target: 'b' }",
            "        }",
            "    ],",
            "    style: [",
            "        {",
            "            selector: 'edge',",
            "            style: {",
            "                // 标签文字",
            "                'label': 'data(id)', // 可以为data中的任何数据",
            "                'color': 'red', // 元素标签的颜色",
            "                // 'text-opacity': 0.2,  // 标签文本（包括其轮廓）的不透明度。",
            "                'font-family': 'Arial', // 以逗号分隔的字体名称列表，用于标签文本。",
            "                'font-size': 100,  // 标签文本的大小。",
            "                'font-style': 'italic', // 要应用于标签文本的CSS字体样式。",
            "                'font-weight': 600, // 要应用于标签文本的CSS字体粗细。",
            "                'text-transform': 'uppercase', // 应用于标签文本的转换；可以是none,  uppercase, lowercase",
            "                'line-height': 2, // 只有多行文字才能体现出来",
            "                'source-text-offset': 0, // 对于边的源标签，应将标签放置在距源节点多远的位置[沿着边的方向,从起点进行偏移]",
            "                'target-text-offset': 0, // 对于边的目标标签，应将标签放置在距目标节点多远的位置[沿着边的方向,从终点进行偏移]",
            "",
            "                // 一般用不上",
            "                // 'source-label': '起源',",
            "                // 'source-text-margin-x': 100,",
            "                // 'source-text-margin-y': 100,",
            "                // 'target-label': '结束',",
            "                // 'target-text-margin-x': 100,",
            "                // 'target-text-margin-y': 100,",
            "",
            "                // 标签文字 - 省略号",
            "                // 'text-wrap': 'ellipsis',",
            "                'text-wrap': 'wrap', // 多行自动换行, 带空格或换行符进行换行",
            "                'text-max-width': 200,",
            "",
            "                // 标签文字 - 位置",
            "                'text-margin-x': 0, // X方向上的相对位移",
            "                'text-margin-y': 0, // Y方向上的相对位移",
            "",
            "                // 标签文字 - 旋转",
            "                'text-rotation': 'autorotate', // 旋转 1 / 4 弧度, 顺时针旋转",
            "",
            "                // 标签文字 - 轮廓",
            "                // 'text-outline-color': 'blue',  // 元素标签文本周围的轮廓颜色。",
            "                // 'text-outline-opacity': 0.5,  // 标签文本上轮廓的不透明度。",
            "                // 'text-outline-width': 2,  // 标签文本上轮廓的大小。",
            "",
            "                // 标签文字 - 背景",
            "                // 'text-background-color': 'blue',  // 要应用于文本背景的颜色。",
            "                // 'text-background-opacity': 1, // 标签背景的不透明度；禁用了背景0（默认值）。",
            "                // 'text-background-shape': 'rectangle', // 用于标签背景的形状可以是 rectangle round-rectangle",
            "                // 'text-background-padding': 20, // 标签背景上的填充（例如5px）；默认情况下使用零填充。",
            "",
            "                // 标签文字 - 边框",
            "                // 'text-border-opacity': 1, // 标签周围边框的宽度；边框被禁用0（默认值）。",
            "                // 'text-border-width': 20,  // 标签周围边框的宽度。",
            "                // 'text-border-style': 'solid', // 标签周围边框的样式；可以是solid dotted dashed double。",
            "                // 'text-border-color': 'blue',  // 标签周围边框的颜色。",
            "",
            "                // 标签文字 - 性能优化",
            "                'min-zoomed-font-size': 80, // 如果缩放使标签的有效字体大小小于此尺寸，则不会显示标签",
            "",
            "                'width': 3,",
            "                'line-color': '#f00',",
            "                // 'line-style': 'solid', // solid dotted dashed",
            "                'line-opacity': 0.1, // 似乎没用",
            "                // 'line-fill': 'solid', // solid linear-gradient radial-gradient",
            "",
            "                'line-style': 'dashed', // solid dotted dashed",
            "                'line-dash-pattern': [16, 3],",
            "                'line-dash-offset': 8, // dashed线偏移量, 创建边缘动画很有用",
            "",
            "                'line-fill': 'linear-gradient', // solid linear-gradient radial-gradient",
            "                'line-gradient-stop-colors': ['red', 'green'],",
            "                'line-gradient-stop-positions': ['0%', '30%'],",
            "",
            "                'source-arrow-color': 'blue', // 起始箭头的颜色",
            "                // https://js.cytoscape.org/demos/edge-arrows/",
            "                'source-arrow-shape': 'square', // triangle triangle-tee circle-triangle triangle-cross triangle-backcurve vee tee square circle diamond chevron none ",
            "                'source-arrow-fill': 'hollow', // <pos>-arrow-fill：边的源箭头的填充状态 filled hollow",
            "                'arrow-scale': 3, // 缩放箭头大小, 箭头和箭尾同时放大 缩小",
            "",
            "                // <pos>-arrow-color: source | mid-source | target | mid-target",
            "                'target-arrow-color': 'black', // 目标箭头的颜色",
            "                // <pos>-arrow-shape': source | mid-source | target | mid-target",
            "                'target-arrow-shape': 'triangle',",
            "                'curve-style': 'bezier', // bezier: 支持箭头显示 straight: 会包含节点, 不显示箭头",
            "                'source-endpoint': '0 0', // 是否穿过中心,默认不过中心, 需要结合curve-style使用",
            "                'target-endpoint': '0 0',",
            "",
            "                // 显示隐藏 - 不占用空间",
            "                // 'display': 'element', // element none",
            "                // 显示隐藏 - 占用空间",
            "                // 'visibility': 'hidden', // visible hidden",
            "                // 透明度 - 占用空间",
            "                'opacity': 0.5,",
            "            }",
            "        }",
            "    ],",
            "})"
        ],
        "description": "边的属性"
    },
    "cy-ele-computedStyle": {
        "prefix": "cy-ele-computedStyle",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#ele.numericStyle",
            "// size",
            "ele.numericStyle('width')",
            "",
            "// time",
            "ele.numericStyle('transition-duration')",
            "",
            "// angles",
            "ele.numericStyle('text-rotation')"
        ],
        "description": "获取cy的计算样式"
    },
    "cy-eles-animate": {
        "prefix": "cy-eles-animate",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.animate",
            "// https://js.cytoscape.org/#style/transition-animation",
            "cy.nodes().animate({",
            "    position: {",
            "        x: pointX,",
            "        y: pointY,",
            "    },",
            "    // renderedPosition: {",
            "    //     x: canvasX,",
            "    //     y: canvasY,",
            "    // },",
            "    style: {",
            "        backgroundColor: 'red',",
            "    }",
            "}, {",
            "    duration: 1000,",
            "    easing: 'ease',",
            "    complete: function () {",
            "    },",
            "    step: function () {",
            "        // console.log('step: ', arguments),",
            "        // 相当于tick函数,",
            "    },",
            "});"
        ],
        "description": "elements 动画"
    },
    "cy-eles-animation": {
        "prefix": "cy-eles-animation",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.animate",
            "// https://js.cytoscape.org/#style/transition-animation",
            "const cyAnimation = cy.nodes().animation({",
            "    position: {",
            "        x: pointX,",
            "        y: pointY,",
            "    },",
            "    // renderedPosition: {",
            "    //     x: canvasX,",
            "    //     y: canvasY,",
            "    // },",
            "    style: {",
            "        backgroundColor: 'red',",
            "    }",
            "}, {",
            "    duration: 1000,",
            "    easing: 'ease',",
            "    complete: function () {",
            "    },",
            "    step: function () {",
            "        // console.log('step: ', arguments),",
            "        // 相当于tick函数,",
            "    },",
            "});",
            "",
            "cyAnimation.play();"
        ],
        "description": "elements 动画, 可以赋值给一个变量"
    },
    "cy-eles-delay": {
        "prefix": "cy-eles-delay",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.delay",
            "cy.nodes()",
            "    .animate({",
            "        style: { 'background-color': 'blue' }",
            "    }, {",
            "        duration: 1000",
            "    })",
            "    .delay(1000)",
            "    .animate({",
            "        style: { 'background-color': 'yellow' }",
            "    })"
        ],
        "description": "延迟执行动画"
    },
    "cy-evt-canvas-click": {
        "prefix": "cy-evt-canvas-click",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "cy.on('click', function (evt) {",
            "    const {",
            "        position: {",
            "            x: pointX,",
            "            y: pointY,",
            "        },",
            "        renderedPosition: {",
            "            x: canvasX,",
            "            y: canvasY,",
            "        }",
            "    } = evt",
            "    const { x: clientX, y: clientY } = getClientByPoint(pointX, pointY, cy, 'cy')",
            "",
            "",
            "    // 判断是否点击在了空白画布上",
            "    const evtTarget = evt.target",
            "    if (evtTarget === cy) {",
            "        console.log('tap on background');",
            "    } else {",
            "        console.log('tap on some element');",
            "    }",
            "});"
        ],
        "description": "canvas click"
    },
    "cy-evt-common-prop": {
        "prefix": "cy-evt-common-prop",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "/**",
            " * @canGet type 事件类型",
            " * @canGet name 事件名称",
            " * @canGet x 画布上的x坐标",
            " * @canGet y 画布上的y坐标",
            " * @canGet clientX 浏览器窗口上的x坐标",
            " * @canGet clientY 浏览器窗口上的y坐标",
            " * @canGet canvasX 画布父容器视口上的x坐标",
            " * @canGet canvasY 画布父容器视口上的y坐标",
            " * @canGet target 事件的触发图形Shape或画布对象",
            " */",
            "cy.on(eventName, evt => {",
            "    var { position: { x: pointX, y: pointY } } = evt.target.json();",
            "    var { x: canvasX, y: canvasY } = getCanvasByPoint(pointX, pointY, cy)",
            "    var { x: ClientX, y: clientY } = getClientByPoint(pointX, pointY, cy, 'cy')",
            "})"
        ],
        "description": "事件对象内部的属性"
    },
    "cy-evt-edge-click": {
        "prefix": "cy-evt-edge-click",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "cy.on('click', 'edge', function(evt){",
            "    const edgeItem = evt.target",
            "    const clickEdges = cy.edges().filter(function( ele ){",
            "        return ele.hasClass( 'click' )",
            "    });",
            "    clickEdges.forEach(cn => {",
            "        cn.removeClass('click')",
            "    })",
            "    edgeItem.addClass([ 'click' ])",
            "});",
            "",
            "cy.edges().on('click', function(evt) {",
            "    // ",
            "})"
        ],
        "description": "edge click"
    },
    "cy-evt-node-click": {
        "prefix": "cy-evt-node-click",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "cy.on('click', 'node', function(evt){",
            "    const nodeItem = evt.target",
            "    const clickNodes = cy.nodes().filter(function( ele ){",
            "        return ele.hasClass( 'click' )",
            "    });",
            "    clickNodes.forEach(cn => {",
            "        cn.removeClass('click')",
            "    })",
            "    nodeItem.addClass([ 'click' ])",
            "});",
            "",
            "cy.nodes().on('click', function(evt) {",
            "    // ",
            "})"
        ],
        "description": "node click"
    },
    "cy-evt-node-click-off-all": {
        "prefix": "cy-evt-node-click-off-all",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "function handleCanvasClick(evt){",
            "}",
            "",
            "cy.on('click', handleCanvasClick);",
            "cy.on('click', function(evt) {",
            "});",
            "",
            "// 会移除所有的函数, 具名的不具名的都会被移除",
            "cy.removeAllListeners()"
        ],
        "description": "为图解除所有的事件监听"
    },
    "cy-evt-node-click-off-single": {
        "prefix": "cy-evt-node-click-off-single",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "function handleCanvasClick(evt){",
            "}",
            "",
            "cy.on('click', handleCanvasClick);",
            "",
            "cy.removeListener('click', handleCanvasClick)"
        ],
        "description": "为图解除指定的事件监听"
    },
    "cy-evt-node-mouseenter": {
        "prefix": "cy-evt-node-mouseenter",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "cy.on('mouseover', 'node', function(evt){",
            "    var eles = evt.target;",
            "    eles.addClass( [ 'hover' ] )",
            "});",
            "",
            "cy.nodes().on('mouseover', function(evt) {",
            "    // ",
            "})"
        ],
        "description": "node mouse enter"
    },
    "cy-evt-node-mouseleave": {
        "prefix": "cy-evt-node-mouseleave",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#events",
            "cy.on('mouseout', 'node', function(evt){",
            "    var eles = evt.target;",
            "    eles.removeClass( [ 'hover' ] )",
            "});",
            "",
            "cy.nodes().on('mouseout', function(evt) {",
            "    // ",
            "})"
        ],
        "description": "node mouse leave"
    },
    "cy-init-structure": {
        "prefix": "cy-init-structure",
        "scope": "javascript,javascriptreact",
        "body": [
            "var cy = cytoscape({",
            "    container: document.getElementById('cy'),",
            "",
            "    elements: [",
            "        { // node a",
            "            data: { id: 'a' }",
            "        },",
            "        { // node b",
            "            data: { id: 'b' }",
            "        },",
            "        {",
            "            data: {",
            "                id: 'ab',",
            "                source: 'a',",
            "                target: 'b',",
            "            },",
            "            pannable: true, // 拖动边是否会导致平移的效果",
            "        },",
            "        {",
            "            group: 'nodes', // 写上这个, 便于调试",
            "            data: { // 放置可序列化的JSON开发数据",
            "                id: 'n1', // 必填字符串序列",
            "                parent: 'nparent',",
            "            },",
            "",
            "            scratch: { // 任意格式的临时数据, 包括非JSON数据",
            "                _foo: 'bar'",
            "            },",
            "",
            "            position: {",
            "                x: 100,",
            "                y: 100",
            "            },",
            "            // renderedPosition: {",
            "            //     x: 200,",
            "            //     y: 200,",
            "            // },",
            "",
            "            selected: false, // 默认是不是选中",
            "            selectable: true, // 是否可以改变选中状态, false的话, 选中状态不能改变 (default true)",
            "            locked: false, // 节点的位置是否保持不变 (default false)",
            "            grabbable: true, // 节点能不能被用户抓取或移动",
            "            pannable: false, // 拖动节点是导致平移而不是抓取",
            "            classes: ['foo', 'bar']",
            "        },",
            "        { // node nparent",
            "            data: { id: 'nparent' }",
            "        },",
            "    ],",
            "",
            "    style: [",
            "        {",
            "            selector: 'node',",
            "            style: {",
            "                'background-color': '#666',",
            "                'label': 'data(id)'",
            "            }",
            "        },",
            "        {",
            "            selector: 'node:selected',",
            "            style: {",
            "                'background-color': '#347ab8',",
            "                'background-opacity': 1,",
            "                'border-width': 4,",
            "                'border-style': 'solid',",
            "                'border-color': '#ff0000',",
            "                'z-index': 999999,",
            "            }",
            "        },",
            "",
            "        {",
            "            selector: 'edge',",
            "            style: {",
            "                'width': 3,",
            "                'line-color': '#f00',",
            "                'target-arrow-color': '#ccc',",
            "                'target-arrow-shape': 'triangle',",
            "                'curve-style': 'bezier',",
            "            }",
            "        }",
            "    ],",
            "",
            "    layout: {",
            "        name: 'grid',",
            "        rows: 1",
            "    },",
            "",
            "    // initial viewport state:",
            "    zoom: 1,",
            "    pan: { x: canvasX, y: canvasY },",
            "",
            "    // interaction options:",
            "    minZoom: 1e-50,",
            "    maxZoom: 1e50,",
            "    zoomingEnabled: true, // 是否允许缩放",
            "    userZoomingEnabled: true, // 是否使用事件（如鼠标轮，箍缩至变焦变焦）改变图形缩放",
            "    panningEnabled: false, // 是否允许平移图表",
            "    userPanningEnabled: true, // 是否允许用户事件（例如拖动图形背景）来平移图表",
            "    boxSelectionEnabled: true, // 是否启用了框选择（即拖动一个框覆盖，并将其释放到选择）// 框选的时候panningEnabled需要禁用下",
            "    selectionType: 'single', // 指定用户的选择类型，additive：用户所做的新选择添加到当前选定元素的集合中，single：由用户做出的新选择成为当前选定元素的整个集合（即以前的元素未被选择）",
            "    touchTapThreshold: 8,",
            "    desktopTapThreshold: 4,",
            "    autolock: false, //  默认情况下，节点是否应该被锁定（不可拖动）（如果TRUE，重写单个节点状态",
            "    autoungrabify: false, // 默认情况下，节点是否应该是未选择的",
            "    autounselectify: false,",
            "",
            "    // rendering options:",
            "    headless: false,",
            "    styleEnabled: true,",
            "    hideEdgesOnViewport: false,",
            "    hideLabelsOnViewport: false,",
            "    textureOnViewport: false,",
            "    motionBlur: false,",
            "    motionBlurOpacity: 0.2,",
            "    wheelSensitivity: 1,",
            "    pixelRatio: 'auto'",
            "})",
            "",
            "// https://js.cytoscape.org/#cy.panningEnabled",
            "cy.panningEnabled(false)",
            "",
            "// https://js.cytoscape.org/#cy.userPanningEnabled",
            "cy.userPanningEnabled(false)",
            "",
            "// https://js.cytoscape.org/#cy.zoomingEnabled",
            "cy.zoomingEnabled(false)",
            "",
            "// https://js.cytoscape.org/#cy.userZoomingEnabled",
            "cy.userZoomingEnabled(false)",
            "",
            "// https://js.cytoscape.org/#cy.boxSelectionEnabled",
            "cy.boxSelectionEnabled(false)"
        ],
        "description": "初始化结构"
    },
    "cy-instance-changeSize": {
        "prefix": "cy-instance-changeSize",
        "scope": "javascript,javascriptreact",
        "body": [
            "cy.fit()"
        ],
        "description": "改变画布大小"
    },
    "cy-instance-fitCenter": {
        "prefix": "cy-instance-fitCenter",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.center",
            "// 如果未指定集合，则图形将以图形中的所有节点和边为中心",
            "cy.center()"
        ],
        "description": "平移图到中心将对齐到画布中心，但不缩放。"
    },
    "cy-instance-fitView": {
        "prefix": "cy-instance-fitView",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.fit",
            "cy.fit()"
        ],
        "description": "让画布内容适应视口"
    },
    "cy-instance-focusItem": {
        "prefix": "cy-instance-focusItem",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.center",
            "// https://js.cytoscape.org/#style/transition-animation",
            "// https://js.cytoscape.org/#cy.animate",
            "cy.fit( [eles] [, padding] )",
            "",
            "var j = cy.$('#b');",
            "cy.center(j);",
            "",
            "// 动画地移动，并配置动画",
            "var j = cy.$('#b');",
            "",
            "cy.animate({",
            "    center: {",
            "        eles: j,",
            "    }",
            "},",
            "{",
            "    duration: 400,",
            "    easing: 'ease',",
            "});"
        ],
        "description": "使得b对齐到视口中心"
    },
    "cy-instance-getZoom": {
        "prefix": "cy-instance-getZoom",
        "scope": "javascript,javascriptreact",
        "body": [
            "cy.zoom()"
        ],
        "description": "获取当前视口的缩放比例"
    },
    "cy-instance-moveTo": {
        "prefix": "cy-instance-moveTo",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.pan",
            "// canvas坐标",
            "cy.pan( renderedPosition )",
            "",
            "cy.pan({",
            "    x: canvasX,",
            "    y: canvasY",
            "});"
        ],
        "description": "采用绝对位移将画布移动到指定坐标"
    },
    "cy-instance-translate": {
        "prefix": "cy-instance-translate",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.panBy",
            "cy.panBy({",
            "    x: dCanvasX,",
            "    y: dCanvasY",
            "});"
        ],
        "description": "采用相对位移来平移画布"
    },
    "cy-instance-zoomTo": {
        "prefix": "cy-instance-zoomTo",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.zoom",
            "cy.zoom({",
            "    level: 1.0,",
            "    position: { x: 0, y: 0 }, // 二选一 point坐标",
            "    renderedPosition: { x: 0, y: 0 }, // 二选一 canvas坐标",
            "})"
        ],
        "description": "缩放视窗窗口到一个固定比例"
    },
    "cy-item-position": {
        "prefix": "cy-item-position",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#node.position",
            "cy.$('#a').position({ x: pointX, y: pointY })",
            "",
            "// https://js.cytoscape.org/#nodes.shift",
            "cy.$('#a').shift({ x: relativePointX, y: relativePointY })",
            "",
            "// 设置多个节点的位置",
            "cy.nodes().positions(function (node, i) {",
            "    return {",
            "        x: i * 100,",
            "        y: 100",
            "    };",
            "});"
        ],
        "description": "节点的相对位移shift和绝对位移position"
    },
    "cy-layout-breadthfirst": {
        "prefix": "cy-layout-breadthfirst",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/breadthfirst",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'breadthfirst',",
            "",
            "        fit: true, // whether to fit the viewport to the graph",
            "        directed: false, // whether the tree is directed downwards (or edges can point in any direction if false)",
            "        padding: 30, // padding on fit",
            "        circle: false, // put depths in concentric circles if true, put depths top down if false",
            "        grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)",
            "        spacingFactor: 1.75, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)",
            "        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space",
            "        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm",
            "        roots: undefined, // the roots of the trees",
            "        maximal: false, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)",
            "        animate: false, // whether to transition the node positions",
            "        animationDuration: 500, // duration of animation in ms if enabled",
            "        animationEasing: undefined, // easing of animation if enabled,",
            "        animateFilter: function (node, i) { return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "        ready: undefined, // callback on layoutready",
            "        stop: undefined, // callback on layoutstop",
            "        transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "breadthfirst-适合树形布局 | DAG图"
    },
    "cy-layout-circle": {
        "prefix": "cy-layout-circle",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/circle",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'circle',",
            "",
            "        fit: true, // whether to fit the viewport to the graph",
            "        padding: 30, // the padding on fit",
            "        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        avoidOverlap: true, // prevents node overlap, may overflow boundingBox and radius if not enough space",
            "        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm",
            "        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up",
            "        radius: undefined, // the radius of the circle",
            "        startAngle: 3 / 2 * Math.PI, // where nodes start in radians",
            "        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)",
            "        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)",
            "        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }",
            "        animate: false, // whether to transition the node positions",
            "        animationDuration: 500, // duration of animation in ms if enabled",
            "        animationEasing: undefined, // easing of animation if enabled",
            "        animateFilter: function (node, i) { return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "        ready: undefined, // callback on layoutready",
            "        stop: undefined, // callback on layoutstop",
            "        transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts ",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "circle布局"
    },
    "cy-layout-concentric": {
        "prefix": "cy-layout-concentric",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/concentric",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'concentric',",
            "",
            "        fit: true, // whether to fit the viewport to the graph",
            "        padding: 30, // the padding on fit",
            "        startAngle: 3 / 2 * Math.PI, // where nodes start in radians",
            "        sweep: undefined, // how many radians should be between the first and last node (defaults to full circle)",
            "        clockwise: true, // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)",
            "        equidistant: false, // whether levels have an equal radial distance betwen them, may cause bounding box overflow",
            "        minNodeSpacing: 10, // min spacing between outside of nodes (used for radius adjustment)",
            "        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space",
            "        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm",
            "        height: undefined, // height of layout area (overrides container height)",
            "        width: undefined, // width of layout area (overrides container width)",
            "        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up",
            "        concentric: function (node) { // returns numeric value for each node, placing higher nodes in levels towards the centre",
            "            return node.degree();",
            "        },",
            "        levelWidth: function (nodes) { // the variation of concentric values in each level",
            "            return nodes.maxDegree() / 4;",
            "        },",
            "        animate: false, // whether to transition the node positions",
            "        animationDuration: 500, // duration of animation in ms if enabled",
            "        animationEasing: undefined, // easing of animation if enabled",
            "        animateFilter: function (node, i) { return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "        ready: undefined, // callback on layoutready",
            "        stop: undefined, // callback on layoutstop",
            "        transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "concentric布局"
    },
    "cy-layout-cose": {
        "prefix": "cy-layout-cose",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/cose",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'cose',",
            "",
            "        // Called on `layoutready`",
            "        ready: function () { },",
            "",
            "        // Called on `layoutstop`",
            "        stop: function () { },",
            "",
            "        // Whether to animate while running the layout",
            "        // true : Animate continuously as the layout is running",
            "        // false : Just show the end result",
            "        // 'end' : Animate with the end result, from the initial positions to the end positions",
            "        animate: true,",
            "",
            "        // Easing of the animation for animate:'end'",
            "        animationEasing: undefined,",
            "",
            "        // The duration of the animation for animate:'end'",
            "        animationDuration: undefined,",
            "",
            "        // A function that determines whether the node should be animated",
            "        // All nodes animated by default on animate enabled",
            "        // Non-animated nodes are positioned immediately when the layout starts",
            "        animateFilter: function (node, i) { return true; },",
            "",
            "",
            "        // The layout animates only after this many milliseconds for animate:true",
            "        // (prevents flashing on fast runs)",
            "        animationThreshold: 250,",
            "",
            "        // Number of iterations between consecutive screen positions update",
            "        refresh: 20,",
            "",
            "        // Whether to fit the network view after when done",
            "        fit: true,",
            "",
            "        // Padding on fit",
            "        padding: 30,",
            "",
            "        // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        boundingBox: undefined,",
            "",
            "        // Excludes the label when calculating node bounding boxes for the layout algorithm",
            "        nodeDimensionsIncludeLabels: false,",
            "",
            "        // Randomize the initial positions of the nodes (true) or use existing positions (false)",
            "        randomize: false,",
            "",
            "        // Extra spacing between components in non-compound graphs",
            "        componentSpacing: 40,",
            "",
            "        // Node repulsion (non overlapping) multiplier",
            "        nodeRepulsion: function (node) { return 2048; },",
            "",
            "        // Node repulsion (overlapping) multiplier",
            "        nodeOverlap: 4,",
            "",
            "        // Ideal edge (non nested) length",
            "        idealEdgeLength: function (edge) { return 32; },",
            "",
            "        // Divisor to compute edge forces",
            "        edgeElasticity: function (edge) { return 32; },",
            "",
            "        // Nesting factor (multiplier) to compute ideal edge length for nested edges",
            "        nestingFactor: 1.2,",
            "",
            "        // Gravity force (constant)",
            "        gravity: 1,",
            "",
            "        // Maximum number of iterations to perform",
            "        numIter: 1000,",
            "",
            "        // Initial temperature (maximum node displacement)",
            "        initialTemp: 1000,",
            "",
            "        // Cooling factor (how the temperature is reduced between consecutive iterations",
            "        coolingFactor: 0.99,",
            "",
            "        // Lower temperature threshold (below this point the layout will end)",
            "        minTemp: 1.0",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "cose"
    },
    "cy-layout-grid": {
        "prefix": "cy-layout-grid",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/grid",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'grid',",
            "",
            "        fit: true, // whether to fit the viewport to the graph",
            "        padding: 30, // padding used on fit",
            "        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space",
            "        avoidOverlapPadding: 10, // extra spacing around nodes when avoidOverlap: true",
            "        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm",
            "        spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up",
            "        condense: false, // uses all available space on false, uses minimal space on true",
            "        rows: undefined, // force num of rows in the grid",
            "        cols: undefined, // force num of columns in the grid",
            "        position: function (node) { }, // returns { row, col } for element",
            "        sort: undefined, // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }",
            "        animate: false, // whether to transition the node positions",
            "        animationDuration: 500, // duration of animation in ms if enabled",
            "        animationEasing: undefined, // easing of animation if enabled",
            "        animateFilter: function (node, i) { return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "        ready: undefined, // callback on layoutready",
            "        stop: undefined, // callback on layoutstop",
            "        transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "grid布局"
    },
    "cy-layout-null": {
        "prefix": "cy-layout-null",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/null",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'null',",
            "",
            "        ready: function(){}, // on layoutready",
            "        stop: function(){} // on layoutstop",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "为调试而生的null布局"
    },
    "cy-layout-preset": {
        "prefix": "cy-layout-preset",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/preset",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    name: 'preset',",
            "",
            "    positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }",
            "    zoom: undefined, // the zoom level to set (prob want fit = false if set)",
            "    pan: undefined, // the pan level to set (prob want fit = false if set)",
            "    fit: true, // whether to fit to viewport",
            "    padding: 30, // padding on fit",
            "    animate: false, // whether to transition the node positions",
            "    animationDuration: 500, // duration of animation in ms if enabled",
            "    animationEasing: undefined, // easing of animation if enabled",
            "    animateFilter: function ( node, i ){ return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "    ready: undefined, // callback on layoutready",
            "    stop: undefined, // callback on layoutstop",
            "    transform: function (node, position ){ return position; } // transform a given node position. Useful for changing flow direction in discrete layouts",
            "",
            "    // ...,",
            "})"
        ],
        "description": "preset布局"
    },
    "cy-layout-random": {
        "prefix": "cy-layout-random",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#layouts",
            "// https://js.cytoscape.org/#layouts/random",
            "",
            "var cy = cytoscape({",
            "    // ...,",
            "",
            "    layout: {",
            "        name: 'random',",
            "",
            "        fit: true, // whether to fit to viewport",
            "        padding: 30, // fit padding",
            "        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }",
            "        animate: false, // whether to transition the node positions",
            "        animationDuration: 500, // duration of animation in ms if enabled",
            "        animationEasing: undefined, // easing of animation if enabled",
            "        animateFilter: function (node, i) { return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts",
            "        ready: undefined, // callback on layoutready",
            "        stop: undefined, // callback on layoutstop",
            "        transform: function (node, position) { return position; } // transform a given node position. Useful for changing flow direction in discrete layouts ",
            "    },",
            "",
            "    // ...,",
            "})"
        ],
        "description": "random"
    },
    "cy-node-addItem": {
        "prefix": "cy-node-addItem",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.add",
            "// https://js.cytoscape.org/#core/layout",
            "var eles = cy.add([",
            "    // { group: 'nodes', data: { id: 'c' }, position: { x: 100, y: 100 } },",
            "    { group: 'nodes', data: { id: 'c' }, position: { x: 0, y: 0 }, classes: ['c-aa', 'c-bb'] },",
            "    { group: 'edges', data: { id: 'bc', source: 'b', target: 'c' } }",
            "]);",
            "",
            "cy.style()",
            "    .selector('.c-aa')",
            "    .style({",
            "        'background-color': 'red',",
            "    })",
            "",
            "var layout = cy.layout({ name: 'grid' });",
            "layout.run();",
            "",
            "// 添加 cy collection",
            "var collection = cy.collection();",
            "cy.nodes().on(\"click\", function () {",
            "    collection = collection.add(this);",
            "});"
        ],
        "description": "新增元素（节点，边，或节点分组）"
    },
    "cy-node-removeItem": {
        "prefix": "cy-node-removeItem",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.remove",
            "// 单个点",
            "var item = cy.$('#nodeId');",
            "cy.remove(item);",
            "",
            "// 集合",
            "var collection = cy.elements(\"node[weight > 50]\");",
            "cy.remove(collection);",
            "",
            "// 合并语句",
            "cy.remove(\"node[weight > 50]\");",
            "",
            "// 查到元素进行删除",
            "cy.$('#nodeId').remove()"
        ],
        "description": "删除元素"
    },
    "cy-node-traverse": {
        "prefix": "cy-node-traverse",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.jsons",
            "cy.nodes().jsons().forEach(item => item)",
            "cy.edges().jsons().forEach(item => item)",
            "cy.elements().jsons().forEach(item => item)"
        ],
        "description": "节点遍历"
    },
    "cy-node-type-common": {
        "prefix": "cy-node-type-common",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#style/node-body",
            "var cy = cytoscape({",
            "    elements: [",
            "        {",
            "            data: {",
            "                id: 'string',",
            "            },",
            "            position: {",
            "                x: 'number',",
            "                y: 'number'",
            "            },",
            "            classes: ['node', 'ellipse'], // 包含共有类名和特有类名",
            "        }",
            "    ],",
            "    style: [",
            "        {",
            "            selector: '.node',",
            "            style: {",
            "                // 形状",
            "                'width': 60,",
            "                'height': 60,",
            "                'shape': 'ellipse', // 'ellipse', 'rectangle', 'round-rectangle', 'triangle', 'round-triangle', 'bottom-round-rectangle', 'cut-rectangle', 'barrel', 'rhomboid', 'diamond', 'round-diamond', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'star', 'tag', 'round-tag', 'vee',",
            "",
            "                // 背景",
            "                'background-color': '#f00',",
            "                'background-blacken': 'number', // [ -1, 1 ] // 使节点的主体变黑，取值范围从0到1；将节点的主体变白，值从0到-1",
            "                'background-opacity': 0.5, // 节点背景色的不透明度级别",
            "                // 'background-fill': 'solid', // solid | linear-gradient | radial-gradient",
            "",
            "                // 渐变",
            "                'background-fill': 'linear-gradient',",
            "                'background-gradient-stop-colors': ['red', 'green'],",
            "                'background-gradient-stop-positions': ['0%','100%'],",
            "                // radial-gradient时不需要下边这个",
            "                'background-gradient-direction': 'to-bottom', // 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left',",
            "",
            "                // 边框",
            "                'border-width': 10, // 节点边框的大小",
            "                'border-style': 'solid', // dotted, dashed, double",
            "                'border-color': 'green',",
            "                'border-opacity': 0.5,",
            "",
            "                // ",
            "                'padding': 10, // 节点四周的填充量",
            "",
            "                // 背景图片",
            "                'background-image': [",
            "                    './images/1.jpg',",
            "                    './images/2.png'",
            "                ],",
            "                'background-fit': 'cover cover', // cover: 覆盖节点, contain: 适应内部节点",
            "                'background-image-opacity': 0.6,",
            "                'background-repeat': 'repeat', // no-repeat, repeat-x, repeat-y, 或repeat",
            "                'background-position-x': 100, // 绝对偏移",
            "                'background-position-y': 100, // 绝对偏移",
            "                'background-offset-x': 100, // 相对偏移",
            "                'background-offset-y': 100, // 相对偏移",
            "",
            "                // 标签文字",
            "                'label': 'data(id)', // 可以为data中的任何数据",
            "                'color': 'red', // 元素标签的颜色",
            "                'text-opacity': 0.2,  // 标签文本（包括其轮廓）的不透明度。",
            "                'font-family': 'Arial', // 以逗号分隔的字体名称列表，用于标签文本。",
            "                'font-size': 100,  // 标签文本的大小。",
            "                'font-style': 'italic', // 要应用于标签文本的CSS字体样式。",
            "                'font-weight': 600, // 要应用于标签文本的CSS字体粗细。",
            "                'text-transform': 'uppercase', // 应用于标签文本的转换；可以是none,  uppercase, lowercase",
            "                'line-height': 2, // 只有多行文字才能体现出来",
            "",
            "                // 标签文字 - 省略号",
            "                'text-wrap': 'ellipsis',",
            "                // 'text-wrap': 'wrap', // 多行自动换行, 带空格或换行符进行换行",
            "                'text-max-width': 200,",
            "",
            "                // 标签文字 - 位置",
            "                'text-halign': 'center', // left, center, right",
            "                'text-valign': 'top', // top, center, bottom",
            "                'text-margin-x': 0, // X方向上的相对位移",
            "                'text-margin-y': 0, // Y方向上的相对位移",
            "",
            "                // 标签文字 - 旋转",
            "                'text-rotation': 3.14 / 4, // 旋转 1 / 4 弧度, 顺时针旋转",
            "",
            "                // 标签文字 - 轮廓",
            "                'text-outline-color': 'blue',  // 元素标签文本周围的轮廓颜色。",
            "                'text-outline-opacity': 0.5,  // 标签文本上轮廓的不透明度。",
            "                'text-outline-width': 2,  // 标签文本上轮廓的大小。",
            "",
            "                // 标签文字 - 背景",
            "                'text-background-color': 'blue',  // 要应用于文本背景的颜色。",
            "                'text-background-opacity': 1, // 标签背景的不透明度；禁用了背景0（默认值）。",
            "                'text-background-shape': 'rectangle', // 用于标签背景的形状可以是 rectangle round-rectangle",
            "                'text-background-padding': 20, // 标签背景上的填充（例如5px）；默认情况下使用零填充。",
            "",
            "                // 标签文字 - 边框",
            "                'text-border-opacity': 1, // 标签周围边框的宽度；边框被禁用0（默认值）。",
            "                'text-border-width': 20,  // 标签周围边框的宽度。",
            "                'text-border-style': 'solid', // 标签周围边框的样式；可以是solid dotted dashed double。",
            "                'text-border-color': 'blue',  // 标签周围边框的颜色。",
            "",
            "                // 标签文字 - 性能优化",
            "                'min-zoomed-font-size': 12, // 如果缩放使标签的有效字体大小小于此尺寸，则不会显示标签",

            "                // 显示隐藏 - 不占用空间",
            "                'display': 'none', // element none",

            "                // 显示隐藏 - 占用空间",
            "                'visibility': 'hidden', // visible hidden",

            "                // 透明度 - 占用空间",
            "                'opacity': 0.5,",
            "            }",
            "        }",
            "    ],",
            "})"
        ],
        "description": "节点的属性"
    },
    "cy-node-updateItem": {
        "prefix": "cy-node-updateItem",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.batch",
            "// https://js.cytoscape.org/#cy.data",
            "// https://js.cytoscape.org/#core/style",
            "// 同步更新",
            "cy.batch(function(){",
            "    cy.$('#a')",
            "        .data({",
            "            label: 'debug'",
            "        })",
            "        .addClass([ 'click', 'hover' ])",
            "        .removeClass([ 'hover' ])",
            "    ;",
            "});",
            "",
            "// 异步更新",
            "cy.startBatch();",
            "",
            "cy.$('#a')",
            "    .data({",
            "        label: 'debug'",
            "    })",
            "    .addClass([ 'click', 'hover' ])",
            "    .removeClass([ 'hover' ])",
            ";",
            "",
            "cy.endBatch();"
        ],
        "description": "更新默认样式&状态样式"
    },
    "cy-nodeOrEdge-clearStates": {
        "prefix": "cy-nodeOrEdge-clearStates",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.removeClass",
            "",
            "eles.removeClass(classes)",
            "",
            "cy.$('#j, #e').removeClass('foo');",
            "cy.$('#j, #e').removeClass(['foo']);"
        ],
        "description": "清除指定的状态"
    },
    "cy-nodeOrEdge-clearStates-all": {
        "prefix": "cy-nodeOrEdge-clearStates-all",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.classes",
            "// 删除所有的类",
            "cy.$('#j, #e').classes([]);",
            "cy.$('#j, #e').classes('');",
            "",
            "// 替换所有的类",
            "cy.$('#j, #e').classes([ 'foo' ]);",
            "cy.$('#j, #e').classes('foo');"
        ],
        "description": "清除或替换所有的状态"
    },
    "cy-nodeOrEdge-getBBox": {
        "prefix": "cy-nodeOrEdge-getBBox",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#node.position",
            "// https://js.cytoscape.org/#ele.width",
            "// https://js.cytoscape.org/#ele.height",
            "",
            "const { x: pointX, y: pointY } = cy.$('#a').position()",
            "const width = cy.$('#a').width()",
            "const width = cy.$('#a').outerWidth()",
            "const width = cy.$('#a').renderedWidth()",
            "const width = cy.$('#a').renderedOuterWidth()",
            "",
            "const height = cy.$('#a').height()",
            "const height = cy.$('#a').outerHeight()",
            "const height = cy.$('#a').renderedHeight()",
            "const height = cy.$('#a').renderedOuterHeight()",
            "",
            "const height = cy.$('#a, #b').boundingBox()",
            "const height = cy.$('#a, #b').renderedBoundingBox()"
        ],
        "description": "获取元素的包围盒"
    },
    "cy-nodeOrEdge-getID": {
        "prefix": "cy-nodeOrEdge-getID",
        "scope": "javascript,javascriptreact",
        "body": [
            "const id = cy.$('#a').id()"
        ],
        "description": "获取元素的ID"
    },
    "cy-nodeOrEdge-getModel": {
        "prefix": "cy-nodeOrEdge-getModel",
        "scope": "javascript,javascriptreact",
        "body": [
            "cy.$('#a').json()",
            "cy.json()",
            "cy.nodes().jsons()",
            "cy.edges().jsons()"
        ],
        "description": "获取元素的数据模型"
    },
    "cy-nodeOrEdge-getStates": {
        "prefix": "cy-nodeOrEdge-getStates",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.classes",
            "cy.$('#j').classes()"
        ],
        "description": "获取当前元素的所有状态"
    },
    "cy-nodeOrEdge-getType": {
        "prefix": "cy-nodeOrEdge-getType",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#ele.isNode",
            "// https://js.cytoscape.org/#ele.isEdge",
            "ele.isNode()",
            "ele.isEdge()"
        ],
        "description": "获取元素的类型"
    },
    "cy-nodeOrEdge-hasState": {
        "prefix": "cy-nodeOrEdge-hasState",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#ele.hasClass",
            "",
            "ele.hasClass( className )",
            "",
            "cy.$('#j').hasClass('active')",
            "",
            "const item = cy.$('#j')",
            "const hasActived = item.hasClass('active')",
            "if (!hasActived) {",
            "    item.addClass([ 'hover' ])",
            "}"
        ],
        "description": "判断元素是否具有某种指定的状态"
    },
    "cy-nodeOrEdge-setState": {
        "prefix": "cy-nodeOrEdge-setState",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.addClass",
            "eles.addClass( classes )",
            "",
            "cy.$('#j, #e').addClass('selected');",
            "cy.$('#j, #e').addClass([ 'actived' ]);"
        ],
        "description": "更新元素的状态"
    },
    "cy-options-edgeStateStyles": {
        "prefix": "cy-options-edgeStateStyles",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.addClass",
            "// https://js.cytoscape.org/#cy.on",
            "// https://js.cytoscape.org/#events",
            "var cy = cytoscape({",
            "    style: [",
            "        {",
            "            selector: 'edge',",
            "            style: {",
            "                'label': 'data(id)', // 可以为data中的任何数据",
            "",
            "                'width': 3,",
            "                'line-color': 'black',",
            "            }",
            "        },",
            "        // {",
            "        //     selector: 'edge:selected',",
            "        //     style: {",
            "        //         'line-color': 'red',",
            "        //     }",
            "        // },",
            "        {",
            "            selector: 'edge.click',",
            "            style: {",
            "                'line-color': 'red',",
            "            }",
            "        },",
            "        {",
            "            selector: 'edge.hover',",
            "            style: {",
            "                'width': 8,",
            "            }",
            "        },",
            "    ],",
            "})",
            "",
            "cy.on('mouseover', 'edge', function(evt){",
            "    var eles = evt.target;",
            "    eles.addClass( [ 'hover' ] )",
            "});",
            "",
            "cy.on('mouseout', 'edge', function(evt){",
            "    var eles = evt.target;",
            "    eles.removeClass( [ 'hover' ] )",
            "});",
            "",
            "cy.on('click', 'edge', function(evt){",
            "    var eles = evt.target;",
            "    eles.toggleClass( [ 'click' ] )",
            "});"
        ],
        "description": "边状态"
    },
    "cy-options-mode-drag-canvas": {
        "prefix": "cy-options-mode-drag-canvas",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#core/initialisation",
            "var cy = cytoscape({",
            "    panningEnabled: true, // 是否允许平移图表",
            "    userPanningEnabled: true, // 是否允许用户事件（例如拖动图形背景）来平移图表",
            "})"
        ],
        "description": "是否可以拖动画布"
    },
    "cy-options-mode-drag-node": {
        "prefix": "cy-options-mode-drag-node",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#core/initialisation",
            "var cy = cytoscape({",
            "    autolock: true, //  默认情况下，节点是否应该被锁定（不可拖动）（如果TRUE，重写单个节点状态",
            "})"
        ],
        "description": "是否可以拖动节点"
    },
    "cy-options-mode-zoom-canvas": {
        "prefix": "cy-options-mode-zoom-canvas",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#core/initialisation",
            "var cy = cytoscape({",
            "    zoom: 1,",
            "    minZoom: 1e-50,",
            "    maxZoom: 1e50,",
            "    zoomingEnabled: true, // 是否允许缩放",
            "    userZoomingEnabled: true, // 是否使用事件（如鼠标轮，箍缩至变焦变焦）改变图形缩放",
            "})"
        ],
        "description": "是否可以缩放画布"
    },
    "cy-options-nodeStateStyles": {
        "prefix": "cy-options-nodeStateStyles",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#eles.addClass",
            "// https://js.cytoscape.org/#cy.on",
            "// https://js.cytoscape.org/#events",
            "var cy = cytoscape({",
            "    style: [",
            "        {",
            "            selector: 'node',",
            "            style: {",
            "                'width': 60,",
            "                'height': 60,",
            "                'background-color': '#666',",
            "                'label': 'data(id)',",
            "            }",
            "        },",
            "        // {",
            "        //     selector: 'node:selected',",
            "        //     style: {",
            "        //         'background-color': '#f00',",
            "        //     }",
            "        // },",
            "        {",
            "            selector: 'node.click',",
            "            style: {",
            "                'background-color': '#f00',",
            "            }",
            "        },",
            "        {",
            "            selector: 'node.hover',",
            "            style: {",
            "                width: 120,",
            "                height: 120,",
            "            }",
            "        },",
            "    ],",
            "})",
            "",
            "cy.on('mouseover', 'node', function(evt){",
            "    var eles = evt.target;",
            "    eles.addClass( [ 'hover' ] )",
            "});",
            "",
            "cy.on('mouseout', 'node', function(evt){",
            "    var eles = evt.target;",
            "    eles.removeClass( [ 'hover' ] )",
            "});",
            "",
            "cy.on('click', 'node', function(evt){",
            "    var eles = evt.target;",
            "    eles.toggleClass( [ 'click' ] )",
            "});"
        ],
        "description": "默认节点状态"
    },
    "cy-options-zoom": {
        "prefix": "cy-options-zoom",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#core/initialisation",
            "var cy = cytoscape({",
            "    zoom: 1,",
            "    minZoom: 1e-50,",
            "    maxZoom: 1e50,",
            "    zoomingEnabled: true, // 是否允许缩放",
            "    userZoomingEnabled: true, // 是否使用事件（如鼠标轮，箍缩至变焦变焦）改变图形缩放",
            "})"
        ],
        "description": "图谱最大最小缩放比例"
    },
    "cy-search-find": {
        "prefix": "cy-search-find",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.$",
            "// data中的数据",
            "cy.getElementById('a').json()",
            "cy.id('a').json()",
            "cy.id('a').json()",
            "cy.$('#a').json()",
            "cy.$('#a, #b').jsons()",
            "cy.$('.c-aa').jsons()",
            "cy.nodes('#a').jsons()",
            "cy.nodes(\"[id='a']\").jsons()",
            "cy.edges('#ab').jsons()",
            "",
            "cy.filter(\"[label='aa']\").jsons()",
            "cy.filter(function (element, i, elements) {",
            "    return element.isNode() && element.data('label') === 'aa';",
            "}).jsons();",
            "cy.nodes(\"[label='aa']\").jsons() // 等同于上边"
        ],
        "description": "根据具体规则查找单个元素"
    },
    "cy-search-findAllByState": {
        "prefix": "cy-search-findAllByState",
        "scope": "javascript,javascriptreact",
        "body": [
            "// https://js.cytoscape.org/#cy.$",
            "",
            "const nodes = cy.filter(function (element, i) {",
            "    return element.isNode() && element.hasClass('selected')",
            "}).jsons();",
            ""
        ],
        "description": "查找所有处于指定状态的元素"
    },
    "cy-style": {
        "prefix": "cy-style",
        "scope": "javascript,javascriptreact",
        "body": [
            "cy.style()",
            "    .fromJson([",
            "        {",
            "            selector: 'node',",
            "            style: {",
            "                'background-color': 'red'",
            "            }",
            "        }",
            "    ])",
            "    .update()"
        ],
        "description": "添加新的样式"
    }
}